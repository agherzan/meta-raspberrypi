# Set the address of the Flattened Device Tree (FDT) and retreive the boot arguments
fdt addr ${fdt_addr} && fdt get value bootargs /chosen bootargs

echo "Using A/B rootfs layout setup"
test -n "${BOOT_ORDER}"   || setenv BOOT_ORDER "A B"
test -n "${BOOT_A_LEFT}"  || setenv BOOT_A_LEFT 3
test -n "${BOOT_B_LEFT}"  || setenv BOOT_B_LEFT 3
test -n "${BOOT_PART_NUM}" || setenv BOOT_PART_NUM "0:1"

setenv bootpart

for BOOT_SLOT in "${BOOT_ORDER}"; do
  if test "x${bootpart}" != "x"; then
    # skip remaining slots
  elif test "x${BOOT_SLOT}" = "xA"; then
    if itest ${BOOT_A_LEFT} -gt 0; then
      setexpr BOOT_A_LEFT ${BOOT_A_LEFT} - 1
      echo "Found valid slot A"
      setenv bootpart "/dev/mmcblk0p2"
      setenv BOOT_PART_NUM "0:2"
    fi
  elif test "x${BOOT_SLOT}" = "xB"; then
    if itest ${BOOT_B_LEFT} -gt 0; then
      setexpr BOOT_B_LEFT ${BOOT_B_LEFT} - 1
      echo "Found valid slot B"
      setenv bootpart "/dev/mmcblk0p3"
      setenv BOOT_PART_NUM "0:3"
    fi
  fi
done

if test -n "${bootpart}"; then
  setenv bootargs "${bootargs} root=${bootpart}"
  saveenv
else
  echo "No valid slot found. Resetting tries to 3"
  setenv BOOT_A_LEFT 3
  setenv BOOT_B_LEFT 3
  saveenv
  reset
fi        

# Load the kernel image
load @@BOOT_MEDIA@@ ${BOOT_PART_NUM} ${kernel_addr_r} boot/@@KERNEL_IMAGETYPE@@
      
# Check if the uboot.env file exists on the specified boot media and partition    
if test ! -e @@BOOT_MEDIA@@ 0:1 uboot.env; then saveenv; fi;

# Execute the kernel boot command
@@KERNEL_BOOTCMD@@ ${kernel_addr_r} - ${fdt_addr}
